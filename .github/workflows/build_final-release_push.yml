name: Create Final Release and Push to Docker Hub
on:
  release:
    types: [published]
  workflow_dispatch:
  push:
    branches:
      - 'master'
  pull_request:
    types: [closed]
    branches:
      - 'master'

jobs:
# This job runs when a GitHub release is published, PR is merged to master, or direct push to master
  deploy-to-dockerhub:
    # Only run this job if the pull request was merged to master or it's a direct push to master or a release is published
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master') || (github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0  # Fetch all history and tags
        
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.3.0
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Get Release Tag
        id: get_tag
        run: |
          # Ensure we have all tags
          git fetch --tags --force
          
          if [[ "${{ github.event_name }}" == "release" ]]; then
            RELEASE_TAG=${{ github.event.release.tag_name }}
            echo "Using release tag: ${RELEASE_TAG}"
          else
            # Get the latest tag
            RELEASE_TAG=$(git tag --sort=-v:refname | head -n 1)
            echo "Found latest tag: ${RELEASE_TAG}"
            
            # If no tag exists, create a new one based on semantic versioning
            if [ -z "$RELEASE_TAG" ]; then
              echo "No existing tags found, creating initial tag"
              RELEASE_TAG="v0.1.0"
            fi
            
            # For master branch, create a new tag with incremented patch version
            if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
              # Extract version components
              if [[ $RELEASE_TAG =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
                MAJOR=${BASH_REMATCH[1]}
                MINOR=${BASH_REMATCH[2]}
                PATCH=${BASH_REMATCH[3]}
                
                # Increment patch version
                PATCH=$((PATCH + 1))
                NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
                echo "Creating new tag: ${NEW_TAG}"
                RELEASE_TAG="${NEW_TAG}"
              fi
            fi
          fi
          
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          
          # Remove beta suffix if present
          FINAL_TAG=$(echo "${RELEASE_TAG}" | sed 's/-beta.*//g')
          echo "Using final tag: ${FINAL_TAG}"
          echo "final_tag=${FINAL_TAG}" >> $GITHUB_OUTPUT
          
      - name: Docker metadata
        id: docker_metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKERHUB_USERNAME }}/minecraft-server
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.get_tag.outputs.final_tag }}
            
      - name: Check Release Status
        id: check_release
        run: |
          # Get the release info for the tag
          RELEASE_INFO=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get_tag.outputs.final_tag }}")
          
          # Extract release ID and prerelease status
          RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id // ""')
          IS_PRERELEASE=$(echo "$RELEASE_INFO" | jq -r '.prerelease // false')
          
          if [ -n "$RELEASE_ID" ]; then
            echo "Found release ID: $RELEASE_ID for tag ${{ steps.get_tag.outputs.final_tag }}"
            echo "Release is prerelease: $IS_PRERELEASE"
            echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
            echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "No release found for tag ${{ steps.get_tag.outputs.final_tag }}"
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update Pre-release to Full Release
        if: steps.check_release.outputs.release_exists == 'true' && steps.check_release.outputs.is_prerelease == 'true'
        run: |
          # Get the current release name and body
          RELEASE_INFO=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.release_id }}")
          
          RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name')
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body')
          
          # Replace "Beta Release" with "Release" in the name
          NEW_NAME=$(echo "$RELEASE_NAME" | sed 's/Beta Release/Release/g')
          echo "Changing release name from '$RELEASE_NAME' to '$NEW_NAME'"
          
          # Update the release body to reflect it's now a full release
          NEW_BODY=$(echo "$RELEASE_BODY" | sed 's/A new adventure is brewing!/Hooray! A new adventure awaits!/g' | sed 's/Prepare to test these new features and report any bugs!/Prepare to dive into the world of creativity and fun!/g')
          
          # Escape the body for JSON
          NEW_BODY_ESCAPED=$(echo "$NEW_BODY" | jq -Rs .)
          
          # Update the release to make it a full release with the new name and body
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"prerelease\": false, \"make_latest\": \"true\", \"name\": \"$NEW_NAME\", \"body\": $NEW_BODY_ESCAPED}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.release_id }}"
          
          echo "Updated release ${{ steps.check_release.outputs.release_id }} to a full release with name '$NEW_NAME'"
      
      - name: Generate Changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git tag --sort=-v:refname | head -n 2 | tail -n 1 || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # If there's no previous tag, get all commits
            git log --pretty=format:"%s" | head -n 10 > /tmp/commits.txt
          else
            # Get commits between tags
            git log --pretty=format:"%s" $PREV_TAG..HEAD | head -n 10 > /tmp/commits.txt
          fi
          
          # Convert commits to Minecraft-themed changelog
          CHANGELOG=""
          while IFS= read -r commit; do
            # Skip empty lines and lines that don't look like commits
            if [ -z "$commit" ] || [[ "$commit" == "###"* ]]; then
              continue
            fi
            
            # Try to match conventional commit format
            if [[ "$commit" =~ ^([a-z]+)\(([a-z0-9_-]+)\)?: ]]; then
              # Extract the type from the match
              TYPE="${BASH_REMATCH[1]}"
              
              # Get the message by removing the matched prefix
              PREFIX="${BASH_REMATCH[0]}"
              MESSAGE="${commit#$PREFIX}"
              
              # Format based on commit type
              case "$TYPE" in
                feat)
                  CHANGELOG+="- üíé **New Diamond Ore Found!** $MESSAGE\n"
                  ;;
                fix)
                  CHANGELOG+="- üõ†Ô∏è **Creeper Explosion Fixed!** $MESSAGE\n"
                  ;;
                perf)
                  CHANGELOG+="- ‚ö° **Redstone Circuit Optimized!** $MESSAGE\n"
                  ;;
                docs)
                  CHANGELOG+="- üìö **Added to the Book of Knowledge!** $MESSAGE\n"
                  ;;
                style)
                  CHANGELOG+="- üé® **Texture Pack Updated!** $MESSAGE\n"
                  ;;
                refactor)
                  CHANGELOG+="- üîÑ **Village Restructured!** $MESSAGE\n"
                  ;;
                test)
                  CHANGELOG+="- üß™ **Potion Testing Complete!** $MESSAGE\n"
                  ;;
                ci)
                  CHANGELOG+="- üîß **Automated Crafting Table Improved!** $MESSAGE\n"
                  ;;
                *)
                  # For other types or non-conventional commits
                  CHANGELOG+="- üåü **Magic Happened!** $MESSAGE\n"
                  ;;
              esac
            else
              # Fallback for non-conventional commits
              CHANGELOG+="- üåü **Magic Happened!** $commit\n"
            fi
          done < /tmp/commits.txt
          
          # If no commits found, add a default message
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- üåü **Magic Happened!** The Minecraft world has been improved in mysterious ways!\n"
          fi
          
          # Save changelog to output with proper escaping
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a ${{ steps.get_tag.outputs.final_tag }} -m "Release ${{ steps.get_tag.outputs.final_tag }}"
          git push origin ${{ steps.get_tag.outputs.final_tag }}
      
      - name: Create GitHub Release
        if: steps.get_tag.outputs.final_tag && (steps.check_release.outputs.release_exists != 'true' || github.ref == 'refs/heads/master')
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get_tag.outputs.final_tag }}
          name: Release ${{ steps.get_tag.outputs.final_tag }}
          body: |
            **üéâ Hooray! A new adventure awaits! üéâ**
            
            We're excited to announce the release of version ${{ steps.get_tag.outputs.final_tag }}!
            
            **What's new in this Minecraft update?**
            ${{ steps.changelog.outputs.changelog }}
            
            **Prepare to dive into the world of creativity and fun!** üåü
            
            Happy crafting! üè∞
            
      - name: Build and push Docker images
        uses: docker/build-push-action@v6.15.0
        with:
          push: true
          context: .
          tags: ${{ steps.docker_metadata.outputs.tags }}
